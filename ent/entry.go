// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/y-yagi/doco/ent/entry"
)

// Entry is the model entity for the Entry schema.
type Entry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entry.FieldID:
			values[i] = new(sql.NullInt64)
		case entry.FieldTitle, entry.FieldBody, entry.FieldTag:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Entry", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entry fields.
func (e *Entry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entry.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case entry.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				e.Body = value.String
			}
		case entry.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				e.Tag = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Entry.
// Note that you need to call Entry.Unwrap() before calling this method if this Entry
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entry) Update() *EntryUpdateOne {
	return NewEntryClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entry) Unwrap() *Entry {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entry is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entry) String() string {
	var builder strings.Builder
	builder.WriteString("Entry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(e.Body)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(e.Tag)
	builder.WriteByte(')')
	return builder.String()
}

// Entries is a parsable slice of Entry.
type Entries []*Entry
